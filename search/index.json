[{"content":"导论 额\u0026hellip;要写好Log？\n随机过程（概率论） 上来就被montmort问题搞懵了，知道答案后（这里有详细描述）明白了几件非常重要的事\nn个人的帽子混成一团然后随机拿，对每个人而言，拿到自己帽子的概率$I_i$都是$\\frac{1}{n}$\n两个人都拿到自己帽子的概率$P(I_iI_j) = \\frac{1}{n(n-1)}$,同理n个人都拿到的概率是$\\frac{1}{n!}$ 而所有人都没拿到自己帽子的概率是$1-P(\\cup I_i)$，由加法公式可得 $$ P(\\cup I_i) = \\sum P(I_i) - \\sum P(I_iI_j) + \\cdots + (-1)^{n-1}P(\\cap I_i) \\\\ = C_n^1\\cdot \\frac{1}{n} - C_n^2\\frac{1}{n(n-1)} + \\cdots + C_n^n\\frac{1}{n!} \\\\ = \\sum_{k=1}^n \\frac{(-1)^{k-1}}{k!} $$ 剩下的就比较简单了\n拼尽全力勉强想起八大分布：0-1分布（伯努利分布）、二项分布B($n,q$)、均匀分布U($a,b$)、指数分布E($\\lambda$)、泊松分布P($\\lambda$)、正态分布N($\\mu,\\sigma$)\n\u0026hellip;\u0026hellip;还有单点分布$P(X=C)=1$，以及几何分布和超几何分布，但后俩跟今天的没关系，嗯\n然后：这个特征函数$\\phi(t)=E(e^{jtx})$（是$jtx$不是$\\pi x$！！！）怎么涉及复数函数求导啊？\\\n于是问了一下deepseek。ds：你可以看到，这非常类似于傅里叶变换。\n傅里叶变换啊，我大三研究了两周没搞懂就放弃了，怎么还在追我\n于是去查了傅里叶变换，发现和欧拉公式有关\n于是去查了欧拉公式，发现和泰勒展开有关\n于是终于找到自己会的了：把$e^x$的$x$替换成$i\\theta$展开，把$i$的幂求出，得到的公式恰好是$\\sin\\theta + \\cos\\theta$的展开，因此\n$e^{i\\theta} = \\sin\\theta + \\cos\\theta$\n然后傅里叶变换就是 $$ F(\\omega) = \\int_{-\\infty}^{+\\infty}f(t)e^{-i\\omega t}dt $$ 要求什么函数的往里代就行\n回到正题，绕了一圈发现带虚数的函数把$i,j$当成常数正常求导就行了\n然后把七种分布的特征函数都求了一遍，感觉微积分也都快扔完了，之后做题补一补吧\n特征函数最重要的性质是 $$ \\phi^{(k)}(0)=j^kEX^k, k\\le n $$ 可以用来求X的n阶矩\n矩阵论 完全跟不上了，之后做题补习吧\n落下的内容：第一章习题、QR变换、合同/相似相关的内容\u0026hellip;\n计算机体系结构 计算机性能不能只看硬件指数，平均性能一般只能达到峰值性能的5%到30%。\n指示码优化：将数据的一部分位作为指示码，用来指示数据类型、数据是否存活等。例如指针4位对齐，就可以用最低两位存放\u0026quot;这是指针\u0026quot;的编码\n要学会提问题，才能有所收获\n","date":"2025-09-09T00:00:00Z","image":"https://starrydreamawa.github.io/hugo-stack.github.io/p/250909/title_hu_d136117ad532eb86.jpg","permalink":"https://starrydreamawa.github.io/hugo-stack.github.io/p/250909/","title":"250909"},{"content":"矩阵论部分 关于线性空间的判定：\n在证明是线性空间时需要列出8条定义，但证明不是的时候基本只要看对加法、数乘不封闭或无零元即可\n关于数乘：常数是额外指定的，通常为实数，不是线性空间里的内容\n例：所有n次多项式关于普通多项式的加法和数乘构成的空间$V$：\n设$A = x^n, B = -x^n$，显然$A, B \\in V$，但$A+B=0 \\notin V$，因此对加法不封闭，不是线性空间\n求$A^{-1}B$的时候，设$A^{-1}B = X$，则$AX = B$，所以可以写出增广矩阵$[A|B]$然后行变换成为$[E|A^{-1}B]$求出结果。\n代码部分 遵循老师“有计算机就别手算矩阵”的教诲，寻找了计算机计算矩阵的方式\n使用numpy可求逆矩阵\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import numpy as np def matrix_invert(A: np.ndarray): try: A_inv = np.linalg.inv(A) print(\u0026#34;\\n逆矩阵:\u0026#34;) print(A_inv) except np.linalg.LinAlgError: print(\u0026#34;\\n该矩阵不可逆\u0026#34;) A = np.array([ [1, 2, 1], [2, 4, 0], [3, 7, 2],]) matrix_invert(A) 逆矩阵: [[ 4. 1.5 -2. ] [-2. -0.5 1. ] [ 1. -0.5 0. ]] 使用sympy可得行最简形矩阵+主元列\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import sympy as sp def matrix_simplify(A: np.ndarray): A_sym = sp.Matrix(A) # 转换成 sympy 矩阵 rref_matrix, pivot_cols = A_sym.rref() print(\u0026#34;\\n行最简形矩阵:\u0026#34;) sp.pprint(rref_matrix) print(\u0026#34;主元列:\u0026#34;, pivot_cols) A = np.array([[1, 1, -1, -1, 2, 0, -2, 1], [2, -1, 2, -1, 1, 1, 1, 3], [-1, 1, 1, 0, 0, 2, 1, 1], [0, 1, 1, 1, 1, 2, 2, 2]]) matrix_simplify(A) 行最简形矩阵: ⎡1 0 0 0 1 0 0 1⎤ ⎢ ⎥ ⎢0 1 0 0 1 1 0 1⎥ ⎢ ⎥ ⎢0 0 1 0 0 1 1 1⎥ ⎢ ⎥ ⎣0 0 0 1 0 0 1 0⎦ 主元列: (0, 1, 2, 3) 没了 呜呜呜\n","date":"2025-09-08T00:00:00Z","image":"https://starrydreamawa.github.io/hugo-stack.github.io/p/250908/title_hu_2d88e15cbb737e24.jpg","permalink":"https://starrydreamawa.github.io/hugo-stack.github.io/p/250908/","title":"250908"},{"content":"我会写标题啦 我会写正文啦💡\n而且还会打数学符号 $\\sum_k^n \\alpha_k\\sin\\theta_k$\n还有超链接\n甚至还会加图片\n以后要加油呀\n","date":"2025-09-07T00:00:00Z","image":"https://starrydreamawa.github.io/hugo-stack.github.io/p/250907/title_hu_10766f6904a726b0.png","permalink":"https://starrydreamawa.github.io/hugo-stack.github.io/p/250907/","title":"250907"}]